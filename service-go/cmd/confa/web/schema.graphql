type Service {
  name: String!
  version: String!
  schema: String!
}

type Confa {
    id: String!
    ownerId: String!
    handle: String!
    title: String!
    description: String!
}

type Confas {
    items: [Confa!]!
    limit: Int!
    nextFrom: String!
}

input ConfaLookup {
    id: String
    ownerId: String
    handle: String
}

input ConfaMask {
    handle: String
    title: String
    description: String
}

type Talk {
    id: String!
    ownerId: String!
    speakerId: String!
    confaId: String!
    roomId: String!
    handle: String!
    title: String!
    description: String!
}

input TalkLookup {
    id: String
    ownerId: String
    speakerId: String
    confaId: String
    handle: String
}

input TalkMask {
    handle: String
    title: String
    description: String
}

type Talks {
    items: [Talk!]!
    limit: Int!
    nextFrom: String!
}

type Claps {
    value: Int!
    userValue: Int!
}

input ClapLookup {
    speakerId: String
    confaId: String
    talkId: String
}

type Mutation {
    createConfa(request: ConfaMask!): Confa!
    updateConfa(where: ConfaLookup! = {}, request: ConfaMask!): Confa!
    createTalk(where: ConfaLookup!, request: TalkMask!): Talk!
    updateTalk(where: TalkLookup! = {}, request: TalkMask!): Talk!
    updateClap(talkId: String!, value: Int!): String!
}

type Query {
    service: Service!

    confas(where: ConfaLookup! = {}, limit: Int!, from: String): Confas!
    talks(where: TalkLookup! = {}, limit: Int!, from: String): Talks!
    aggregateClaps(where: ClapLookup! = {}): Claps!
}
