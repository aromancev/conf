type Service {
  name: String!
  version: String!
  schema: String!
}

type Event {
    id: String!
    ownerId: String!
    roomId: String!
    payload: EventPayload!
    createdAt: Float!
}

type EventPayload {
    message: EventMessage
    peerState: EventPeerState
}

type EventMessage {
    text: String!
}

type EventPeerState {
    status: Status
    tracks: [Track!]!
}

enum Status {
    joined
    left
}

type Track {
    id: String!
    hint: Hint!
}

enum Hint {
    camera
    screen
    user_audio
    device_audio
}

input EventLookup {
    roomId: String!
}

type EventFrom {
    id: String!
    createdAt: Float!
}

input EventFromInput {
    id: String!
    createdAt: Float!
}

input EventLimit {
    count: Int! = 100
    seconds: Int!
}

enum EventOrder {
    ASC
    DESC
}

type Events {
    items: [Event!]!
    limit: Int!
    nextFrom: EventFrom
}

type Query {
    service: Service!

    events(where: EventLookup! = {}, limit: EventLimit!, from: EventFromInput, order: EventOrder): Events!
}
