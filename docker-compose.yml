version: '3.9'

x-service-common: &service-common
  image: golang:1.19-alpine
  restart: on-failure
  working_dir: /app
  volumes:
    - ./services:/app:delegated
    - ./.artifacts/.cache:/root/.cache:delegated
  networks:
      - confa

x-service-env: &service-env
  LOG_FORMAT: "console"
  LOG_LEVEL: "info"
  LISTEN_WEB_ADDRESS: ":80"
  LISTEN_RPC_ADDRESS: ":8080"
  SECRET_KEY: "LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUI4Zm1WV2hNZEFvL1VrRE5ONFVHbzhQWXdLeHovbE43bmlsbVlhMktFa2JvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFVHJNZDBCcjdHT3BFN1VTMWpKN0xiTDBMOHZJaTNOeFJ4blhoT3hEV2FBaGQ0TXhkRjE3ZgpBWTVPR2pKcFBkV0o4VERNUUg3RXM5OFNBQjlwVlJWWmhnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo="
  PUBLIC_KEY: "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFVHJNZDBCcjdHT3BFN1VTMWpKN0xiTDBMOHZJaQozTnhSeG5YaE94RFdhQWhkNE14ZEYxN2ZBWTVPR2pKcFBkV0o4VERNUUg3RXM5OFNBQjlwVlJWWmhnPT0KLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg=="
  MONGO_HOSTS: "mongo:27017"
  BASE_URL: "http://localhost"
  BEANSTALK_POOL: "beanstalk:11300"
  BEANSTALK_TUBE_SEND: "sender/send"
  BEANSTALK_TUBE_UPDATE_AVATAR: "confa/update-avatar"
  BEANSTALK_TUBE_START_RECORDING: "confa/start-recording"
  BEANSTALK_TUBE_STOP_RECORDING: "confa/stop-recording"
  BEANSTALK_TUBE_RECORDING_UPDATE: "confa/recording-update"
  BEANSTALK_TUBE_STORE_EVENT: "rtc/store-event"
  BEANSTALK_TUBE_UPDATE_RECORDING_TRACK: "rtc/update-recording-track"
  BEANSTALK_TUBE_PROCESS_TRACK: "avp/process-track"
  STORAGE_HOST: "minio:80"
  STORAGE_ACCESS_KEY: "minio"
  STORAGE_SECRET_KEY: "miniominio"
  STORAGE_PUBLIC_URL: "/api/storage"
  STORAGE_BUCKET_USER_PUBLIC: "user-public"
  STORAGE_BUCKET_USER_UPLOADS: "user-uploads"
  STORAGE_BUCKET_TRACK_RECORDS: "confa-tracks-internal"
  STORAGE_BUCKET_TRACK_PUBLIC: "confa-tracks-public"
  RTC_RPC_ADDRESS: "rtc:8080"
  TRACKER_RPC_ADDRESS: "tracker:8080"
  SFU_RPC_ADDRESS: "sfu:8080"
  IAM_RPC_ADDRESS: "iam:8080"

services:
  nginx:
    image: nginx:1.19.6
    restart: on-failure
    networks:
      - confa
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf

  web:
    restart: on-failure
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    command: pnpm run serve
    # In the dockerfile node_modules is built at /app, so we mount to a subfolder to avoid bringing node_modules from host with mapping.
    # Node will not find node_modules in the work dir and will look in the parent folder (/app).
    working_dir: /app/web 
    networks:
      - confa
    environment:
      VITE_RTC_ROOM_URL: "ws://localhost/api/rtc/room/socket"
      VITE_SFU_TURN_URLS: "turn:localhost?transport=tcp"
      VITE_STORAGE_URL: "/api/storage"
    volumes:
      - ./web:/app/web:delegated
      # Prevent node folders from being mapped by the previous volume.
      # They will just be empty in the container.
      - /app/web/node_modules
      - /app/web/.pnpm-store
      - /app/web/dist

  gateway:
    <<: *service-common
    command: "go run ./cmd/gateway"
    environment:
      <<: *service-env
      SERVICES: "http://iam:80/graph,http://rtc:80/graph,http://confa:80/graph"
      SCHEMA_UPDATE_INTERVAL_S: 5

  iam:
    <<: *service-common
    command: "go run ./cmd/iam"
    environment:
      <<: *service-env
      EMAIL_SERVER: "email-client"
      EMAIL_PORT: "1025"
      EMAIL_ADDRESS: "noreply@confa.io"
      EMAIL_PASSWORD: "stub"
      EMAIL_SECURE: "false"
      MONGO_USER: "iam"
      MONGO_PASSWORD: "iam"
      MONGO_DATABASE: "iam"
      DOMAIN: "localhost"

  confa:
    <<: *service-common
    command: "go run ./cmd/confa"
    environment:
      <<: *service-env
      MONGO_USER: "confa"
      MONGO_PASSWORD: "confa"
      MONGO_DATABASE: "confa"

  rtc:
    <<: *service-common
    command: "go run ./cmd/rtc"
    environment:
      <<: *service-env
      MONGO_USER: "rtc"
      MONGO_PASSWORD: "rtc"
      MONGO_DATABASE: "rtc"

  sfu:
    <<: *service-common
    command: "go run ./cmd/sfu"
    environment:
      <<: *service-env
      ICE_PORT_MIN: "5000"
      ICE_PORT_MAX: "5010"
      ICE_URLS: "stun:stun.stunprotocol.org:3478"

  turn:
    <<: *service-common
    command: "go run ./cmd/turn"
    ports:
      - "3478:3478"
    environment:
      <<: *service-env
      LISTEN_WEB_ADDRESS: ":3478"
      REALM: "confa.io"
      USERNAME: "confa"
      CREDENTIAL: "confa"
      PUBLIC_IP: "127.0.0.1"

  tracker:
    <<: *service-common
    command: "go run ./cmd/tracker"
    environment:
      <<: *service-env

  avp:
    <<: *service-common
    build:
      dockerfile: ./services/Dockerfile
    working_dir: /app
    command: "go run ./cmd/avp"
    environment:
      <<: *service-env

  sender:
    <<: *service-common
    command: "go run ./cmd/sender"
    environment:
      <<: *service-env
      MAILERSEND_TOKEN: stub
      MAILERSEND_BASE_URL: http://sender-clients
      MAILERSEND_FROM_EMAIL: noreply@mail.confa.io

  beanstalk:
    build:
      dockerfile: ./beanstalk/Dockerfile
    networks:
      - confa
    volumes:
      - .artifacts/beanstalk:/var/lib/beanstalkd

  mongo:
    image: mongo:4.4
    command: "mongod --logpath /dev/null --dbpath /data/db --replSet rs --keyFile /etc/mongo/mongo-repl.key"
    networks:
      - confa
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    volumes:
      - .artifacts/mongo/:/data/db
    entrypoint:
      - bash
      - -c
      - |
        mkdir /etc/mongo
        openssl rand -base64 768 > /etc/mongo/mongo-repl.key
        chmod 400 /etc/mongo/mongo-repl.key
        chown 999:999 /etc/mongo/mongo-repl.key
        exec docker-entrypoint.sh $$@

  minio:
    image: minio/minio:RELEASE.2022-04-16T04-26-02Z
    command: server /data --address=":80"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniominio
      MINIO_BROWSER: off
    networks:
      - confa
    volumes:
      - .artifacts/minio:/data

  sender-clients:
    <<: *service-common
    command: "go run ./cmd/sender-clients"
    environment:
      LISTEN_WEB_ADDRESS: ":80"
      LOG_FORMAT: "console"
      LOG_LEVEL: "info"
    networks:
      - confa
    ports:
      - "8001:80"

networks:
  confa:
    name: confa
