type Token {
    token: String!
    expiresIn: Int!
}

type Confa {
    id: String!
    ownerId: String!
    handle: String!
    title: String!
    description: String!
}

type Confas {
    items: [Confa!]!
    limit: Int!
    nextFrom: String!
}

input ConfaInput {
    id: String
    ownerId: String
    handle: String
    title: String
    description: String
}

type Talk {
    id: String!
    ownerId: String!
    speakerId: String!
    confaId: String!
    roomId: String!
    handle: String!
}

input TalkInput {
    id: String
    ownerId: String
    speakerId: String
    confaId: String
    handle: String
}
type Talks {
    items: [Talk!]!
    limit: Int!
    nextFrom: String!
}

type Claps {
    value: Int!
    userValue: Int!
}

input ClapInput {
    speakerId: String
    confaId: String
    talkId: String
}

type Event {
    id: ID!
    ownerId: ID!
    roomId: ID!
    createdAt: String!
    payload: EventPayload!
}

type EventPayload {
    type: String!
    payload: String!
}

input EventInput {
    roomId: ID!
}

type EventFrom {
    id: ID!
    createdAt: String!
}

input EventFromInput {
    id: ID!
    createdAt: String!
}

input EventLimit {
    count: Int! = 100
    seconds: Int!
}

enum EventOrder {
    ASC
    DESC
}

type Events {
    items: [Event!]!
    limit: Int!
    nextFrom: EventFrom
}

type Mutation {
    login(address: String!): String!
    createSession(emailToken: String!): Token!

    createConfa(request: ConfaInput!): Confa!
    updateConfa(where: ConfaInput! = {}, request: ConfaInput!): Int!
    createTalk(confaId: String!, handle: String): Talk!
    startTalk(talkId: String!): String!
    updateClap(talkId: String!, value: Int!): String!
}

type Query {
    token: Token!

    confas(where: ConfaInput! = {}, limit: Int! = 100, from: String): Confas!
    talks(where: TalkInput! = {}, limit: Int! = 100, from: String): Talks!
    events(where: EventInput! = {}, limit: EventLimit!, from: EventFromInput, order: EventOrder): Events!
    aggregateClaps(where: ClapInput! = {}): Claps!
}
