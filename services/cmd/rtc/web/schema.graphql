type Service {
  name: String!
  version: String!
  schema: String!
}

type Event {
    id: String!
    roomId: String!
    payload: String!
    createdAt: String!
}

input EventLookup {
    roomId: String!
}

type EventCursor {
    id: String
    createdAt: String
    Asc: Boolean
}

input EventCursorInput {
    id: String
    createdAt: String
    Asc: Boolean
}

type Events {
    items: [Event!]!
    limit: Int!
    next: EventCursor
}

type Recording {
    key: String!
    roomId: String!
    status: RecordingStatus!
    createdAt: Float!
    startedAt: Float!
    stoppedAt: Float
}

enum RecordingStatus {
    RECORDING
    PROCESSING
    READY
}

input RecordingLookup {
    roomId: String!
    key: String
}

type RecordingFrom {
    key: String!
}

input RecordingFromInput {
    key: String!
}

type Recordings {
    items: [Recording!]!
    limit: Int!
    nextFrom: RecordingFrom
}

type Query {
    service: Service!

    events(where: EventLookup! = {}, limit: Int! = 100, cursor: EventCursorInput): Events!
    recordings(where: RecordingLookup!, limit: Int! = 100, from: RecordingFromInput): Recordings!
}
