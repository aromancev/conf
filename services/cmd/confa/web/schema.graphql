type Service {
  name: String!
  version: String!
  schema: String!
}

type Confa {
    id: String!
    ownerId: String!
    handle: String!
    title: String!
    description: String!
    createdAt: String!
}

type Confas {
    items: [Confa!]!
    limit: Int!
    next: ConfaCursor
}

type ConfaCursor {
    id: String
    createdAt: String
    Asc: Boolean
}

input ConfaCursorInput {
    id: String
    createdAt: String
    Asc: Boolean
}

input ConfaLookup {
    id: String
    ownerId: String
    handle: String
}

input ConfaUpdate {
    handle: String
    title: String
    description: String
}

type Talk {
    id: String!
    ownerId: String!
    speakerId: String!
    confaId: String!
    roomId: String!
    handle: String!
    title: String!
    description: String!
    state: TalkState! 
    createdAt: String!
}

enum TalkState {
    CREATED
	LIVE
	RECORDING
	ENDED
}

input TalkLookup {
    id: String
    ownerId: String
    speakerId: String
    confaId: String
    handle: String
}

input TalkUpdate {
    handle: String
    title: String
    description: String
}

type Talks {
    items: [Talk!]!
    limit: Int!
    next: TalkCursor
}

type TalkCursor {
    id: String
    createdAt: String
    Asc: Boolean
}

input TalkCursorInput {
    id: String
    createdAt: String
    Asc: Boolean
}

type Claps {
    value: Int!
    userValue: Int!
}

input ClapLookup {
    speakerId: String
    confaId: String
    talkId: String
}

type Profile {
    id: String!
    ownerId: String!
    handle: String!
    givenName: String
    familyName: String
    avatarThumbnail: Image
    avatarUrl: String
}

type Image {
    format: String!
    data: String!
}

input ProfileUpdate {
    handle: String
    givenName: String
    familyName: String
}

input ProfileLookup {
    ownerIds: [String!]
    handle: String
}

type Profiles {
    items: [Profile!]!
    limit: Int!
    next: ProfileCursor
}

type ProfileCursor {
    id: String
}

input ProfileCursorInput {
    id: String
}

type UploadToken {
    url: String!
    formData: String!
}

type Mutation {
    createConfa(request: ConfaUpdate!): Confa!
    updateConfa(where: ConfaLookup! = {}, request: ConfaUpdate!): Confa!

    createTalk(where: ConfaLookup!, request: TalkUpdate!): Talk!
    updateTalk(where: TalkLookup! = {}, request: TalkUpdate!): Talk!
    startTalkRecording(where: TalkLookup!): Talk!
    stopTalkRecording(where: TalkLookup!): Talk!

    updateProfile(request: ProfileUpdate!): Profile!
    requestAvatarUpload: UploadToken!
}

type Query {
    service: Service!

    confas(where: ConfaLookup! = {}, limit: Int!, cursor: ConfaCursorInput): Confas!
    talks(where: TalkLookup! = {}, limit: Int!, cursor: TalkCursorInput): Talks!
    profiles(where: ProfileLookup! = {}, limit: Int!, cursor: ProfileCursorInput): Profiles!
}
