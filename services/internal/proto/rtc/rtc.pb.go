// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.2
// source: rtc.proto

package rtc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Room struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerId []byte `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *Room) Reset() {
	*x = Room{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Room) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room) ProtoMessage() {}

func (x *Room) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room.ProtoReflect.Descriptor instead.
func (*Room) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{0}
}

func (x *Room) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Room) GetOwnerId() []byte {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

type RecordingParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId     []byte `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Key        string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	ExpireInMs int64  `protobuf:"varint,3,opt,name=expire_in_ms,json=expireInMs,proto3" json:"expire_in_ms,omitempty"`
}

func (x *RecordingParams) Reset() {
	*x = RecordingParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingParams) ProtoMessage() {}

func (x *RecordingParams) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingParams.ProtoReflect.Descriptor instead.
func (*RecordingParams) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{1}
}

func (x *RecordingParams) GetRoomId() []byte {
	if x != nil {
		return x.RoomId
	}
	return nil
}

func (x *RecordingParams) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RecordingParams) GetExpireInMs() int64 {
	if x != nil {
		return x.ExpireInMs
	}
	return 0
}

type RecordingLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId      []byte `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RecordingId []byte `protobuf:"bytes,2,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
	Key         string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RecordingLookup) Reset() {
	*x = RecordingLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingLookup) ProtoMessage() {}

func (x *RecordingLookup) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingLookup.ProtoReflect.Descriptor instead.
func (*RecordingLookup) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{2}
}

func (x *RecordingLookup) GetRoomId() []byte {
	if x != nil {
		return x.RoomId
	}
	return nil
}

func (x *RecordingLookup) GetRecordingId() []byte {
	if x != nil {
		return x.RecordingId
	}
	return nil
}

func (x *RecordingLookup) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Recording struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId        []byte `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RecordingId   []byte `protobuf:"bytes,2,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
	StartedAt     int64  `protobuf:"varint,3,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	AlreadyExists bool   `protobuf:"varint,4,opt,name=already_exists,json=alreadyExists,proto3" json:"already_exists,omitempty"`
}

func (x *Recording) Reset() {
	*x = Recording{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recording) ProtoMessage() {}

func (x *Recording) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recording.ProtoReflect.Descriptor instead.
func (*Recording) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{3}
}

func (x *Recording) GetRoomId() []byte {
	if x != nil {
		return x.RoomId
	}
	return nil
}

func (x *Recording) GetRecordingId() []byte {
	if x != nil {
		return x.RecordingId
	}
	return nil
}

func (x *Recording) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *Recording) GetAlreadyExists() bool {
	if x != nil {
		return x.AlreadyExists
	}
	return false
}

type UpdateRecordingTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update      *UpdateRecordingTrack_Update `protobuf:"bytes,1,opt,name=update,proto3" json:"update,omitempty"`
	RecordingId []byte                       `protobuf:"bytes,2,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
	RecordId    []byte                       `protobuf:"bytes,3,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	UpdatedAt   int64                        `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *UpdateRecordingTrack) Reset() {
	*x = UpdateRecordingTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecordingTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordingTrack) ProtoMessage() {}

func (x *UpdateRecordingTrack) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordingTrack.ProtoReflect.Descriptor instead.
func (*UpdateRecordingTrack) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateRecordingTrack) GetUpdate() *UpdateRecordingTrack_Update {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UpdateRecordingTrack) GetRecordingId() []byte {
	if x != nil {
		return x.RecordingId
	}
	return nil
}

func (x *UpdateRecordingTrack) GetRecordId() []byte {
	if x != nil {
		return x.RecordId
	}
	return nil
}

func (x *UpdateRecordingTrack) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type StoreEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *StoreEvent) Reset() {
	*x = StoreEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreEvent) ProtoMessage() {}

func (x *StoreEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreEvent.ProtoReflect.Descriptor instead.
func (*StoreEvent) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{5}
}

func (x *StoreEvent) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   *Event_Payload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Id        []byte         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	RoomId    []byte         `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	CreatedAt int64          `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{6}
}

func (x *Event) GetPayload() *Event_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Event) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Event) GetRoomId() []byte {
	if x != nil {
		return x.RoomId
	}
	return nil
}

func (x *Event) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type UpdateRecordingTrack_Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*UpdateRecordingTrack_Update_RecordingStarted
	//	*UpdateRecordingTrack_Update_RecordingFinished
	//	*UpdateRecordingTrack_Update_ProcessingStarted
	//	*UpdateRecordingTrack_Update_ProcessingFinished
	Update isUpdateRecordingTrack_Update_Update `protobuf_oneof:"update"`
}

func (x *UpdateRecordingTrack_Update) Reset() {
	*x = UpdateRecordingTrack_Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecordingTrack_Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordingTrack_Update) ProtoMessage() {}

func (x *UpdateRecordingTrack_Update) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordingTrack_Update.ProtoReflect.Descriptor instead.
func (*UpdateRecordingTrack_Update) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{4, 0}
}

func (m *UpdateRecordingTrack_Update) GetUpdate() isUpdateRecordingTrack_Update_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *UpdateRecordingTrack_Update) GetRecordingStarted() *UpdateRecordingTrack_RecordingStarted {
	if x, ok := x.GetUpdate().(*UpdateRecordingTrack_Update_RecordingStarted); ok {
		return x.RecordingStarted
	}
	return nil
}

func (x *UpdateRecordingTrack_Update) GetRecordingFinished() *UpdateRecordingTrack_RecordingFinished {
	if x, ok := x.GetUpdate().(*UpdateRecordingTrack_Update_RecordingFinished); ok {
		return x.RecordingFinished
	}
	return nil
}

func (x *UpdateRecordingTrack_Update) GetProcessingStarted() *UpdateRecordingTrack_ProcessingStarted {
	if x, ok := x.GetUpdate().(*UpdateRecordingTrack_Update_ProcessingStarted); ok {
		return x.ProcessingStarted
	}
	return nil
}

func (x *UpdateRecordingTrack_Update) GetProcessingFinished() *UpdateRecordingTrack_ProcessingFinished {
	if x, ok := x.GetUpdate().(*UpdateRecordingTrack_Update_ProcessingFinished); ok {
		return x.ProcessingFinished
	}
	return nil
}

type isUpdateRecordingTrack_Update_Update interface {
	isUpdateRecordingTrack_Update_Update()
}

type UpdateRecordingTrack_Update_RecordingStarted struct {
	RecordingStarted *UpdateRecordingTrack_RecordingStarted `protobuf:"bytes,1,opt,name=recording_started,json=recordingStarted,proto3,oneof"`
}

type UpdateRecordingTrack_Update_RecordingFinished struct {
	RecordingFinished *UpdateRecordingTrack_RecordingFinished `protobuf:"bytes,2,opt,name=recording_finished,json=recordingFinished,proto3,oneof"`
}

type UpdateRecordingTrack_Update_ProcessingStarted struct {
	ProcessingStarted *UpdateRecordingTrack_ProcessingStarted `protobuf:"bytes,3,opt,name=processing_started,json=processingStarted,proto3,oneof"`
}

type UpdateRecordingTrack_Update_ProcessingFinished struct {
	ProcessingFinished *UpdateRecordingTrack_ProcessingFinished `protobuf:"bytes,4,opt,name=processing_finished,json=processingFinished,proto3,oneof"`
}

func (*UpdateRecordingTrack_Update_RecordingStarted) isUpdateRecordingTrack_Update_Update() {}

func (*UpdateRecordingTrack_Update_RecordingFinished) isUpdateRecordingTrack_Update_Update() {}

func (*UpdateRecordingTrack_Update_ProcessingStarted) isUpdateRecordingTrack_Update_Update() {}

func (*UpdateRecordingTrack_Update_ProcessingFinished) isUpdateRecordingTrack_Update_Update() {}

type UpdateRecordingTrack_RecordingStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRecordingTrack_RecordingStarted) Reset() {
	*x = UpdateRecordingTrack_RecordingStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecordingTrack_RecordingStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordingTrack_RecordingStarted) ProtoMessage() {}

func (x *UpdateRecordingTrack_RecordingStarted) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordingTrack_RecordingStarted.ProtoReflect.Descriptor instead.
func (*UpdateRecordingTrack_RecordingStarted) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{4, 1}
}

type UpdateRecordingTrack_RecordingFinished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRecordingTrack_RecordingFinished) Reset() {
	*x = UpdateRecordingTrack_RecordingFinished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecordingTrack_RecordingFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordingTrack_RecordingFinished) ProtoMessage() {}

func (x *UpdateRecordingTrack_RecordingFinished) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordingTrack_RecordingFinished.ProtoReflect.Descriptor instead.
func (*UpdateRecordingTrack_RecordingFinished) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{4, 2}
}

type UpdateRecordingTrack_ProcessingStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRecordingTrack_ProcessingStarted) Reset() {
	*x = UpdateRecordingTrack_ProcessingStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecordingTrack_ProcessingStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordingTrack_ProcessingStarted) ProtoMessage() {}

func (x *UpdateRecordingTrack_ProcessingStarted) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordingTrack_ProcessingStarted.ProtoReflect.Descriptor instead.
func (*UpdateRecordingTrack_ProcessingStarted) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{4, 3}
}

type UpdateRecordingTrack_ProcessingFinished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRecordingTrack_ProcessingFinished) Reset() {
	*x = UpdateRecordingTrack_ProcessingFinished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecordingTrack_ProcessingFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordingTrack_ProcessingFinished) ProtoMessage() {}

func (x *UpdateRecordingTrack_ProcessingFinished) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordingTrack_ProcessingFinished.ProtoReflect.Descriptor instead.
func (*UpdateRecordingTrack_ProcessingFinished) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{4, 4}
}

type Event_Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hint string `protobuf:"bytes,2,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *Event_Track) Reset() {
	*x = Event_Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Track) ProtoMessage() {}

func (x *Event_Track) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Track.ProtoReflect.Descriptor instead.
func (*Event_Track) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Event_Track) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event_Track) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

type Event_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*Event_Payload_PeerState_
	//	*Event_Payload_Message_
	//	*Event_Payload_Recording_
	//	*Event_Payload_TrackRecording_
	//	*Event_Payload_Reaction_
	Payload isEvent_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *Event_Payload) Reset() {
	*x = Event_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Payload) ProtoMessage() {}

func (x *Event_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Payload.ProtoReflect.Descriptor instead.
func (*Event_Payload) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{6, 1}
}

func (m *Event_Payload) GetPayload() isEvent_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Event_Payload) GetPeerState() *Event_Payload_PeerState {
	if x, ok := x.GetPayload().(*Event_Payload_PeerState_); ok {
		return x.PeerState
	}
	return nil
}

func (x *Event_Payload) GetMessage() *Event_Payload_Message {
	if x, ok := x.GetPayload().(*Event_Payload_Message_); ok {
		return x.Message
	}
	return nil
}

func (x *Event_Payload) GetRecording() *Event_Payload_Recording {
	if x, ok := x.GetPayload().(*Event_Payload_Recording_); ok {
		return x.Recording
	}
	return nil
}

func (x *Event_Payload) GetTrackRecording() *Event_Payload_TrackRecording {
	if x, ok := x.GetPayload().(*Event_Payload_TrackRecording_); ok {
		return x.TrackRecording
	}
	return nil
}

func (x *Event_Payload) GetReaction() *Event_Payload_Reaction {
	if x, ok := x.GetPayload().(*Event_Payload_Reaction_); ok {
		return x.Reaction
	}
	return nil
}

type isEvent_Payload_Payload interface {
	isEvent_Payload_Payload()
}

type Event_Payload_PeerState_ struct {
	PeerState *Event_Payload_PeerState `protobuf:"bytes,1,opt,name=peer_state,json=peerState,proto3,oneof"`
}

type Event_Payload_Message_ struct {
	Message *Event_Payload_Message `protobuf:"bytes,2,opt,name=message,proto3,oneof"`
}

type Event_Payload_Recording_ struct {
	Recording *Event_Payload_Recording `protobuf:"bytes,3,opt,name=recording,proto3,oneof"`
}

type Event_Payload_TrackRecording_ struct {
	TrackRecording *Event_Payload_TrackRecording `protobuf:"bytes,4,opt,name=track_recording,json=trackRecording,proto3,oneof"`
}

type Event_Payload_Reaction_ struct {
	Reaction *Event_Payload_Reaction `protobuf:"bytes,5,opt,name=reaction,proto3,oneof"`
}

func (*Event_Payload_PeerState_) isEvent_Payload_Payload() {}

func (*Event_Payload_Message_) isEvent_Payload_Payload() {}

func (*Event_Payload_Recording_) isEvent_Payload_Payload() {}

func (*Event_Payload_TrackRecording_) isEvent_Payload_Payload() {}

func (*Event_Payload_Reaction_) isEvent_Payload_Payload() {}

type Event_Payload_PeerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId    []byte         `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	SessionId []byte         `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Status    string         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Tracks    []*Event_Track `protobuf:"bytes,4,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *Event_Payload_PeerState) Reset() {
	*x = Event_Payload_PeerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Payload_PeerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Payload_PeerState) ProtoMessage() {}

func (x *Event_Payload_PeerState) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Payload_PeerState.ProtoReflect.Descriptor instead.
func (*Event_Payload_PeerState) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{6, 1, 0}
}

func (x *Event_Payload_PeerState) GetPeerId() []byte {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *Event_Payload_PeerState) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *Event_Payload_PeerState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Event_Payload_PeerState) GetTracks() []*Event_Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type Event_Payload_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId []byte `protobuf:"bytes,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Text   string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Event_Payload_Message) Reset() {
	*x = Event_Payload_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Payload_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Payload_Message) ProtoMessage() {}

func (x *Event_Payload_Message) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Payload_Message.ProtoReflect.Descriptor instead.
func (*Event_Payload_Message) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{6, 1, 1}
}

func (x *Event_Payload_Message) GetFromId() []byte {
	if x != nil {
		return x.FromId
	}
	return nil
}

func (x *Event_Payload_Message) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Event_Payload_Recording struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Event_Payload_Recording) Reset() {
	*x = Event_Payload_Recording{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Payload_Recording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Payload_Recording) ProtoMessage() {}

func (x *Event_Payload_Recording) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Payload_Recording.ProtoReflect.Descriptor instead.
func (*Event_Payload_Recording) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{6, 1, 2}
}

func (x *Event_Payload_Recording) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type Event_Payload_TrackRecording struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TrackId string `protobuf:"bytes,2,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
}

func (x *Event_Payload_TrackRecording) Reset() {
	*x = Event_Payload_TrackRecording{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Payload_TrackRecording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Payload_TrackRecording) ProtoMessage() {}

func (x *Event_Payload_TrackRecording) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Payload_TrackRecording.ProtoReflect.Descriptor instead.
func (*Event_Payload_TrackRecording) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{6, 1, 3}
}

func (x *Event_Payload_TrackRecording) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Event_Payload_TrackRecording) GetTrackId() string {
	if x != nil {
		return x.TrackId
	}
	return ""
}

type Event_Payload_Reaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId   []byte                           `protobuf:"bytes,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Reaction *Event_Payload_Reaction_Reaction `protobuf:"bytes,2,opt,name=reaction,proto3" json:"reaction,omitempty"`
}

func (x *Event_Payload_Reaction) Reset() {
	*x = Event_Payload_Reaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Payload_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Payload_Reaction) ProtoMessage() {}

func (x *Event_Payload_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Payload_Reaction.ProtoReflect.Descriptor instead.
func (*Event_Payload_Reaction) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{6, 1, 4}
}

func (x *Event_Payload_Reaction) GetFromId() []byte {
	if x != nil {
		return x.FromId
	}
	return nil
}

func (x *Event_Payload_Reaction) GetReaction() *Event_Payload_Reaction_Reaction {
	if x != nil {
		return x.Reaction
	}
	return nil
}

type Event_Payload_Reaction_Reaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reaction:
	//	*Event_Payload_Reaction_Reaction_Clap_
	Reaction isEvent_Payload_Reaction_Reaction_Reaction `protobuf_oneof:"reaction"`
}

func (x *Event_Payload_Reaction_Reaction) Reset() {
	*x = Event_Payload_Reaction_Reaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Payload_Reaction_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Payload_Reaction_Reaction) ProtoMessage() {}

func (x *Event_Payload_Reaction_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Payload_Reaction_Reaction.ProtoReflect.Descriptor instead.
func (*Event_Payload_Reaction_Reaction) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{6, 1, 4, 0}
}

func (m *Event_Payload_Reaction_Reaction) GetReaction() isEvent_Payload_Reaction_Reaction_Reaction {
	if m != nil {
		return m.Reaction
	}
	return nil
}

func (x *Event_Payload_Reaction_Reaction) GetClap() *Event_Payload_Reaction_Reaction_Clap {
	if x, ok := x.GetReaction().(*Event_Payload_Reaction_Reaction_Clap_); ok {
		return x.Clap
	}
	return nil
}

type isEvent_Payload_Reaction_Reaction_Reaction interface {
	isEvent_Payload_Reaction_Reaction_Reaction()
}

type Event_Payload_Reaction_Reaction_Clap_ struct {
	Clap *Event_Payload_Reaction_Reaction_Clap `protobuf:"bytes,1,opt,name=clap,proto3,oneof"`
}

func (*Event_Payload_Reaction_Reaction_Clap_) isEvent_Payload_Reaction_Reaction_Reaction() {}

type Event_Payload_Reaction_Reaction_Clap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsStarting bool `protobuf:"varint,1,opt,name=is_starting,json=isStarting,proto3" json:"is_starting,omitempty"`
}

func (x *Event_Payload_Reaction_Reaction_Clap) Reset() {
	*x = Event_Payload_Reaction_Reaction_Clap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Payload_Reaction_Reaction_Clap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Payload_Reaction_Reaction_Clap) ProtoMessage() {}

func (x *Event_Payload_Reaction_Reaction_Clap) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Payload_Reaction_Reaction_Clap.ProtoReflect.Descriptor instead.
func (*Event_Payload_Reaction_Reaction_Clap) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{6, 1, 4, 0, 0}
}

func (x *Event_Payload_Reaction_Reaction_Clap) GetIsStarting() bool {
	if x != nil {
		return x.IsStarting
	}
	return false
}

var File_rtc_proto protoreflect.FileDescriptor

var file_rtc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x74, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x04, 0x52,
	0x6f, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5e,
	0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0c,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x4d, 0x73, 0x22, 0x5f,
	0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x8d, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22,
	0xfc, 0x04, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0xfa, 0x02,
	0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x58, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x12, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x12, 0x0a, 0x10, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x1a, 0x13,
	0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x1a, 0x13, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x1a, 0x14, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x2a,
	0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xe7, 0x07, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x2b, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x69, 0x6e, 0x74, 0x1a, 0xbe, 0x06, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x70, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x81, 0x01, 0x0a, 0x09, 0x50, 0x65,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x1a, 0x36, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x23, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x3b, 0x0a, 0x0e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x1a, 0xdf, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x7c, 0x0a, 0x08, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6c, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x61, 0x70, 0x48, 0x00, 0x52, 0x04,
	0x63, 0x6c, 0x61, 0x70, 0x1a, 0x27, 0x0a, 0x04, 0x43, 0x6c, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x32, 0x86, 0x01, 0x0a, 0x03, 0x52, 0x54, 0x43, 0x12, 0x1c, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x05, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x1a, 0x05, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0a,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0d,
	0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x1a,
	0x0a, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rtc_proto_rawDescOnce sync.Once
	file_rtc_proto_rawDescData = file_rtc_proto_rawDesc
)

func file_rtc_proto_rawDescGZIP() []byte {
	file_rtc_proto_rawDescOnce.Do(func() {
		file_rtc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rtc_proto_rawDescData)
	})
	return file_rtc_proto_rawDescData
}

var file_rtc_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_rtc_proto_goTypes = []interface{}{
	(*Room)(nil),                                    // 0: Room
	(*RecordingParams)(nil),                         // 1: RecordingParams
	(*RecordingLookup)(nil),                         // 2: RecordingLookup
	(*Recording)(nil),                               // 3: Recording
	(*UpdateRecordingTrack)(nil),                    // 4: UpdateRecordingTrack
	(*StoreEvent)(nil),                              // 5: StoreEvent
	(*Event)(nil),                                   // 6: Event
	(*UpdateRecordingTrack_Update)(nil),             // 7: UpdateRecordingTrack.Update
	(*UpdateRecordingTrack_RecordingStarted)(nil),   // 8: UpdateRecordingTrack.RecordingStarted
	(*UpdateRecordingTrack_RecordingFinished)(nil),  // 9: UpdateRecordingTrack.RecordingFinished
	(*UpdateRecordingTrack_ProcessingStarted)(nil),  // 10: UpdateRecordingTrack.ProcessingStarted
	(*UpdateRecordingTrack_ProcessingFinished)(nil), // 11: UpdateRecordingTrack.ProcessingFinished
	(*Event_Track)(nil),                             // 12: Event.Track
	(*Event_Payload)(nil),                           // 13: Event.Payload
	(*Event_Payload_PeerState)(nil),                 // 14: Event.Payload.PeerState
	(*Event_Payload_Message)(nil),                   // 15: Event.Payload.Message
	(*Event_Payload_Recording)(nil),                 // 16: Event.Payload.Recording
	(*Event_Payload_TrackRecording)(nil),            // 17: Event.Payload.TrackRecording
	(*Event_Payload_Reaction)(nil),                  // 18: Event.Payload.Reaction
	(*Event_Payload_Reaction_Reaction)(nil),         // 19: Event.Payload.Reaction.Reaction
	(*Event_Payload_Reaction_Reaction_Clap)(nil),    // 20: Event.Payload.Reaction.Reaction.Clap
}
var file_rtc_proto_depIdxs = []int32{
	7,  // 0: UpdateRecordingTrack.update:type_name -> UpdateRecordingTrack.Update
	6,  // 1: StoreEvent.event:type_name -> Event
	13, // 2: Event.payload:type_name -> Event.Payload
	8,  // 3: UpdateRecordingTrack.Update.recording_started:type_name -> UpdateRecordingTrack.RecordingStarted
	9,  // 4: UpdateRecordingTrack.Update.recording_finished:type_name -> UpdateRecordingTrack.RecordingFinished
	10, // 5: UpdateRecordingTrack.Update.processing_started:type_name -> UpdateRecordingTrack.ProcessingStarted
	11, // 6: UpdateRecordingTrack.Update.processing_finished:type_name -> UpdateRecordingTrack.ProcessingFinished
	14, // 7: Event.Payload.peer_state:type_name -> Event.Payload.PeerState
	15, // 8: Event.Payload.message:type_name -> Event.Payload.Message
	16, // 9: Event.Payload.recording:type_name -> Event.Payload.Recording
	17, // 10: Event.Payload.track_recording:type_name -> Event.Payload.TrackRecording
	18, // 11: Event.Payload.reaction:type_name -> Event.Payload.Reaction
	12, // 12: Event.Payload.PeerState.tracks:type_name -> Event.Track
	19, // 13: Event.Payload.Reaction.reaction:type_name -> Event.Payload.Reaction.Reaction
	20, // 14: Event.Payload.Reaction.Reaction.clap:type_name -> Event.Payload.Reaction.Reaction.Clap
	0,  // 15: RTC.CreateRoom:input_type -> Room
	1,  // 16: RTC.StartRecording:input_type -> RecordingParams
	2,  // 17: RTC.StopRecording:input_type -> RecordingLookup
	0,  // 18: RTC.CreateRoom:output_type -> Room
	3,  // 19: RTC.StartRecording:output_type -> Recording
	3,  // 20: RTC.StopRecording:output_type -> Recording
	18, // [18:21] is the sub-list for method output_type
	15, // [15:18] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_rtc_proto_init() }
func file_rtc_proto_init() {
	if File_rtc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rtc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Room); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recording); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecordingTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecordingTrack_Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecordingTrack_RecordingStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecordingTrack_RecordingFinished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecordingTrack_ProcessingStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecordingTrack_ProcessingFinished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Payload_PeerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Payload_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Payload_Recording); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Payload_TrackRecording); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Payload_Reaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Payload_Reaction_Reaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Payload_Reaction_Reaction_Clap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rtc_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*UpdateRecordingTrack_Update_RecordingStarted)(nil),
		(*UpdateRecordingTrack_Update_RecordingFinished)(nil),
		(*UpdateRecordingTrack_Update_ProcessingStarted)(nil),
		(*UpdateRecordingTrack_Update_ProcessingFinished)(nil),
	}
	file_rtc_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Event_Payload_PeerState_)(nil),
		(*Event_Payload_Message_)(nil),
		(*Event_Payload_Recording_)(nil),
		(*Event_Payload_TrackRecording_)(nil),
		(*Event_Payload_Reaction_)(nil),
	}
	file_rtc_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*Event_Payload_Reaction_Reaction_Clap_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rtc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rtc_proto_goTypes,
		DependencyIndexes: file_rtc_proto_depIdxs,
		MessageInfos:      file_rtc_proto_msgTypes,
	}.Build()
	File_rtc_proto = out.File
	file_rtc_proto_rawDesc = nil
	file_rtc_proto_goTypes = nil
	file_rtc_proto_depIdxs = nil
}
