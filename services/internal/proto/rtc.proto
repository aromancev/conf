syntax = "proto3";

service RTC {
    rpc CreateRoom(Room) returns (Room) {}
    rpc StartRecording(RecordingParams) returns (Recording) {}
    rpc StopRecording(RecordingLookup) returns (Recording) {}
}

message Room {
    bytes id = 1;
    bytes owner_id = 2;
}

message RecordingParams {
    bytes room_id = 1;
    string key = 2;
    int64 expire_in_ms = 3;
}

message RecordingLookup {
    bytes room_id = 1;
    bytes recording_id = 2;
    string key = 3;
}

message Recording {
    bytes room_id = 1;
    bytes recording_id = 2;
    int64 started_at = 3;
    bool already_exists = 4;
}

message UpdateRecordingTrack {
    message Update {
        oneof update {
            RecordingStarted recording_started = 1;
            RecordingFinished recording_finished = 2;
            ProcessingStarted processing_started = 3;
            ProcessingFinished processing_finished = 4;
        }
    }

    message RecordingStarted {}
    message RecordingFinished {}
    message ProcessingStarted {}
    message ProcessingFinished {}

    Update update = 1;
    bytes recording_id = 2;
    bytes record_id = 3; 
    int64 updated_at = 4;
}

message StoreEvent {
    Event event = 1;
}

enum TrackKind {
    AUDIO = 0;
    VIDEO = 1;
}

enum TrackSource {
    UNKNOWN = 0;
    CAMERA = 1;
    MICROPHONE = 2;
    SCREEN = 3;
    SCREEN_AUDIO = 4;
}

message Event {
    message Payload {
        message PeerState {
            bytes peer_id = 1;
            bytes session_id = 2;
            string status = 3;  
        }
        message Message {
            bytes from_id = 1;
            string text = 2;
        }
        message Recording {
            string status = 1;
        }
        message TrackRecord {
            bytes record_id = 1;
            TrackKind kind = 3;
            TrackSource source = 4;
        }
        message Reaction {
            message Reaction {
                message Clap {
                    bool is_starting = 1;
                }

                oneof reaction {
                    Clap clap = 1;
                }
            }

            bytes from_id = 1;
            Reaction reaction = 2;
        }

        oneof payload {
            PeerState peer_state = 1;
            Message message = 2;
            Recording recording = 3;
            TrackRecord track_record = 4;
            Reaction reaction = 5;
        }
    }

    Payload payload = 1;
    bytes id = 2;
    bytes room_id = 3;
    int64 created_at = 4;
}
